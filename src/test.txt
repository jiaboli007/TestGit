void dervsCartesian2RT(int na1, double* xyz1, double* cderv, double* chess, double RTderv[6],
                       double RThess[6][6]) {
    int i, i3, i6;
    double x, y, z;
    double derv[3];
    double hess[6];

    for (i = 0; i < na1; i++) {
        i3 = i * 3;
        i6 = i3 + i3;

        derv[0] = cderv[i3];
        derv[1] = cderv[i3 + 1];
        derv[2] = cderv[i3 + 2];
        hess[0] = chess[i6];
        hess[1] = chess[i6 + 1];
        hess[2] = chess[i6 + 2];
        hess[3] = chess[i6 + 3];
        hess[4] = chess[i6 + 4];
        hess[5] = chess[i6 + 5];

        x = xyz1[ i3];
        y = xyz1[ i3 + 1];
        z = xyz1[ i3 + 2];
        //
        // First derivatives
        //
        RTderv[3] += derv[0];
        RTderv[4] += derv[1];
        RTderv[5] += derv[2];
        RTderv[0] += -derv[0] * y + derv[1] * x;
        RTderv[1] += -derv[1] * z + derv[2] * y;
        RTderv[2] +=  derv[0] * z - derv[2] * x;
        //
        // Hessian. variables 0=alpha, 1=beta, 2=gamma, 3=tx, 4=ty, 5=tx
        //
        RThess[3][3] += hess[0];
        RThess[3][4] += hess[1];
        RThess[4][4] += hess[2];
        RThess[3][5] += hess[3];
        RThess[4][5] += hess[4];
        RThess[5][5] += hess[5];
        RThess[0][0] += -derv[0] * x - derv[1] * y +
                        hess[0] * y * y -
                        hess[1] * y * x * 2.0 + hess[2] * x * x;
        RThess[0][1] += derv[0] * z + hess[1] * y * z -
                        hess[2] * x * z - hess[3] * y * y +
                        hess[4] * x * y;
        RThess[1][1] += -derv[1] * y - derv[2] * z +
                        hess[2] * z * z -
                        hess[4] * y * z * 2.0 +
                        hess[5] * y * y;
        RThess[0][2] += derv[2] * y - hess[0] * y * z +
                        hess[1] * x * z + hess[3] * x * y -
                        hess[4] * x * x;
        RThess[1][2] += derv[0] * y - hess[1] * z * z +
                        hess[3] * y * z + hess[4] * x * z -
                        hess[5] * x * y;
        RThess[2][2] += -derv[0] * x - derv[2] * z +
                        hess[0] * z * z -
                        hess[3] * x * z * 2.0 + hess[5] * x * x;
        RThess[0][3] += -hess[0] * y + hess[1] * x;
        RThess[1][3] += -hess[1] * z + hess[3] * y;
        RThess[2][3] += hess[0] * z - hess[3] * x;

        RThess[0][4] += -hess[1] * y + hess[2] * x;
        RThess[1][4] += -hess[2] * z + hess[4] * y;
        RThess[2][4] += hess[1] * z - hess[4] * x;

        RThess[0][5] += -hess[3] * y + hess[4] * x;
        RThess[1][5] += -hess[4] * z + hess[5] * y;
        RThess[2][5] += hess[3] * z - hess[5] * x;
